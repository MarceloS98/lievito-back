generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  product_id  Int      @id @default(autoincrement())
  name        String
  description String?
  price       Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_deleted  Boolean  @default(false)

  ProductIngredient ProductIngredient[]
  ProductStock      ProductStock[]
}

model ProductIngredient {
  product_ingredient_id Int   @id @default(autoincrement())
  quantity              Float

  product    Product @relation(fields: [product_id], references: [product_id])
  product_id Int

  ingredient    Ingredient @relation(fields: [ingredient_id], references: [ingredient_id])
  ingredient_id Int
}

model Presentation {
  presentation_id Int      @id @default(autoincrement())
  name            String
  size_gr         Float    @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  is_deleted      Boolean  @default(false)

  ProductStock ProductStock[]
}

model ProductStock {
  product_stock_id Int       @id @default(autoincrement())
  quantity         Int       @default(0)
  expiration_date  DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  is_deleted       Boolean   @default(false)

  movement ProductStockMovement[]

  product         Product      @relation(fields: [product_id], references: [product_id], onUpdate: Cascade)
  product_id      Int
  presentation    Presentation @relation(fields: [presentation_id], references: [presentation_id])
  presentation_id Int
}

model ProductStockMovement {
  movement_id   Int      @id @default(autoincrement())
  movement_date DateTime
  quantity      Int
  movement_type String
  concept       String?
  created_at    DateTime @default(now())

  product_stock    ProductStock @relation(fields: [product_stock_id], references: [product_stock_id])
  product_stock_id Int
}

model Ingredient {
  ingredient_id Int      @id @default(autoincrement())
  name          String
  description   String?
  price_kg      Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  is_deleted    Boolean  @default(false)

  ProductIngredient ProductIngredient[]
  IngredientStock   IngredientStock[]
}

model IngredientStock {
  ingredient_stock_id Int       @id @default(autoincrement())
  quantity_kg         Float     @default(0)
  expiration_date     DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  is_deleted          Boolean   @default(false)

  movements IngredientStockMovement[]

  ingredient    Ingredient @relation(fields: [ingredient_id], references: [ingredient_id], onUpdate: Cascade)
  ingredient_id Int
}

model IngredientStockMovement {
  movement_id   Int      @id @default(autoincrement())
  movement_date DateTime
  quantity      Float
  movement_type String
  concept       String?
  created_at    DateTime @default(now())

  ingredient_stock    IngredientStock @relation(fields: [ingredient_stock_id], references: [ingredient_stock_id])
  ingredient_stock_id Int
}
